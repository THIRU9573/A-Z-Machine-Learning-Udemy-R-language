training_set
training_set[-3]
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(e1071)
classifier = svm(formula = dataset$Purchased~., data = training_set,
type = 'C-classification',
kernel = 'linear')
library(e1071)
classifier = svm(formula = Purchased~., data = training_set,
type = 'C-classification',
kernel = 'linear')
q()
#Support vector machine:
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 16 - Support Vector Machine (SVM)/R/Social_Network_Ads.csv")
dataset = dataset[,3:5]
str(dataset)
summary(dataset)
#Fitting the training and testing model
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set = subset(dataset,split == TRUE)
test_set = subset(dataset,split == FALSE)
#Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
#train the Support vector machine to the dataset
#install.packages('e1071')
library(e1071)
classifier = svm(formula = Purchased~., data = training_set,
type = 'C-classification',
kernel = 'linear')
y_pred = predict(classifier,newdata = test_set[-3])
cm = table(test_set[, 3],y_pred)
cm
#Visualising the training set
library(ElemstatLearn)
set = training_set
X1 = seq(min(set[,1])-1,max(seq[,1])+1,by = 0.01)
X2 = seq(min(set[,2])-1,max(seq[,2])+1,by =0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age','EstimatedSalary')
prob_set = predict(classifier, type  = 'response',newdata = grid_set)
y_grid = predict(classifier,newdata = grid_set)
plot(set[,-3],
main = 'Support Vector machine(Training set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'springgreen3','tomato'))
points(set,pch = 21,bg = ifelse(set[,3]==1,'green4','red3'))
#Visualising the test set
library(ElemstatLearn)
set = test_set
X1 = seq(min(set[,1])-1,max(seq[,1])+1,by = 0.01)
X2 = seq(min(set[,2])-1,max(seq[,2])+1,by =0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age','EstimatedSalary')
prob_set = predict(classifier, type  = 'response',newdata = grid_set)
y_grid = predict(classifier,newdata = grid_set)
plot(set[,-3],
main = 'Support Vector machine(Training set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'springgreen3','tomato'))
points(set,pch = 21,bg = ifelse(set[,3]==1,'green4','red3'))
set = test_set
X1 = seq(min(set[,1])-1,max(seq[,1])+1,by = 0.01)
X2 = seq(min(set[,2])-1,max(seq[,2])+1,by =0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age','EstimatedSalary')
prob_set = predict(classifier, type  = 'response',newdata = grid_set)
y_grid = predict(classifier,newdata = grid_set)
plot(set[,-3],
main = 'Support Vector machine(Test set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'springgreen3','tomato'))
points(set,pch = 21,bg = ifelse(set[,3]==1,'green4','red3'))
q()
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 16 - Support Vector Machine (SVM)/R/Social_Network_Ads.csv")
dataset
dataset = dataset[,3:5]
str(dataset)
summary(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set = subset(dataset,split == TRUE)
test_set = subset(dataset,split == FALSE)
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(e1071)
classifier = svm(formula = Purchased~., data = training_set,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier,newdata = test_set[-3])
cm = table(test_set[, 3],y_pred)
cm
#Visualising the training set
library(ElemstatLearn)
set = training_set
X1 = seq(min(set[,1])-1,max(seq[,1])+1,by = 0.01)
X2 = seq(min(set[,2])-1,max(seq[,2])+1,by =0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age','EstimatedSalary')
prob_set = predict(classifier, type  = 'response',newdata = grid_set)
y_grid = predict(classifier,newdata = grid_set)
plot(set[,-3],
main = 'Support Vector machine(Training set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'springgreen3','tomato'))
points(set,pch = 21,bg = ifelse(set[,3]==1,'green4','red3'))
#Visualising the test set
library(ElemstatLearn)
set = test_set
X1 = seq(min(set[,1])-1,max(seq[,1])+1,by = 0.01)
X2 = seq(min(set[,2])-1,max(seq[,2])+1,by =0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age','EstimatedSalary')
prob_set = predict(classifier, type  = 'response',newdata = grid_set)
y_grid = predict(classifier,newdata = grid_set)
plot(set[,-3],
main = 'Support Vector machine(Test set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'springgreen3','tomato'))
points(set,pch = 21,bg = ifelse(set[,3]==1,'green4','red3'))
q()
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 16 - Support Vector Machine (SVM)/R/Social_Network_Ads.csv")
datset
dataset
dataset = dataset[,3:5]
str(dataset)
summary(dataset)
#Fitting the training and testing model
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set = subset(dataset,split == TRUE)
test_set = subset(dataset,split == FALSE)
#Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
library(e1071)
classifier = naiveBayes(x = training_set[-3],
y = training_set$Purchased )
y_pred = predict(classifier,newdata = test_set[-3])
cm = table(test_set[, 3],y_pred)
cm
#Visualising the training set
library(ElemstatLearn)
set = training_set
X1 = seq(min(set[,1])-1,max(seq[,1])+1,by = 0.01)
X2 = seq(min(set[,2])-1,max(seq[,2])+1,by =0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age','EstimatedSalary')
prob_set = predict(classifier, type  = 'response',newdata = grid_set)
y_grid = predict(classifier,newdata = grid_set)
plot(set[,-3],
main = 'Support Vector machine(Training set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'springgreen3','tomato'))
points(set,pch = 21,bg = ifelse(set[,3]==1,'green4','red3'))
#Visualising the training set
library(ElemstatLearn)
set = training_set
X1 = seq(min(set[,1])-1,max(seq[,1])+1,by = 0.01)
X2 = seq(min(set[,2])-1,max(seq[,2])+1,by =0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age','EstimatedSalary')
prob_set = predict(classifier, type  = 'response',newdata = grid_set)
y_grid = predict(classifier,newdata = grid_set)
plot(set[,-3],
main = 'Naive Bayes(Training set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'springgreen3','tomato'))
points(set,pch = 21,bg = ifelse(set[,3]==1,'green4','red3'))
#Visualising the test set
library(ElemstatLearn)
set = test_set
X1 = seq(min(set[,1])-1,max(seq[,1])+1,by = 0.01)
X2 = seq(min(set[,2])-1,max(seq[,2])+1,by =0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age','EstimatedSalary')
prob_set = predict(classifier, type  = 'response',newdata = grid_set)
y_grid = predict(classifier,newdata = grid_set)
plot(set[,-3],
main = 'Naive bayes(Test set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'springgreen3','tomato'))
points(set,pch = 21,bg = ifelse(set[,3]==1,'green4','red3'))
q()
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 19 - Decision Tree Classification/R/Social_Network_Ads.csv")
dataset
dataset = dataset[3:5]
dataset
str(dataset)
summary(dataset)
library(caTools)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set = subset(dataset split ==TRUE)
test_set = sunbset(dataset,split == FALSE)
library(caTools)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set = subset(dataset, split ==TRUE)
test_set = subset(dataset,split == FALSE)
#Decision tree Classifier:
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 19 - Decision Tree Classification/R/Social_Network_Ads.csv")
dataset = dataset[3:5]
str(dataset)
summary(dataset)
#Splitting the dataset
library(caTools)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set = subset(dataset, split ==TRUE)
test_set = subset(dataset,split == FALSE)
training_set[-3]
ftraining_set[-3] scale(training_set[-3])
training_set[-3] scale(training_set[-3])
#Decision tree Classifier:
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 19 - Decision Tree Classification/R/Social_Network_Ads.csv")
dataset = dataset[3:5]
str(dataset)
summary(dataset)
#Splitting the dataset
library(caTools)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set = subset(dataset, split ==TRUE)
test_set = subset(dataset,split == FALSE)
#Feature scaling:
training_set[-3] = scale(training_set[-3])
training_set[-3] = scale(training_set[-3])
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 19 - Decision Tree Classification/R/Social_Network_Ads.csv")
dataset = dataset[3:5]
dataset
str(dataset)
summary(dataset)
#Splitting the dataset
library(caTools)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set = subset(dataset, split ==TRUE)
test_set = subset(dataset,split == FALSE)
#Feature scaling:
training_set[-3] = scale(training_set[-3])
training_set[-3] = scale(training_set[-3])
#train the decision tree classification to dataset
#install.packages('rpart')
library(rpart)
classifier = rpart(formula = Purchased~., data = training_set[,3])
#predict the test set 
y_pred = predict(classifier,newdata = test_set[,3],type = 'class')
#making confution matrix 
cm = table(test_set[,3],y_pred)
#Decision tree Classifier:
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 19 - Decision Tree Classification/R/Social_Network_Ads.csv")
dataset = dataset[3:5]
str(dataset)
summary(dataset)
#Splitting the dataset
library(caTools)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set = subset(dataset, split ==TRUE)
test_set = subset(dataset,split == FALSE)
#Feature scaling:
training_set[-3] = scale(training_set[-3])
training_set[-3] = scale(training_set[-3])
#train the decision tree classification to dataset
#install.packages('rpart')
library(rpart)
classifier = rpart(formula = Purchased~., data = training_set)
#predict the test set 
y_pred = predict(classifier,newdata = test_set[-3],type = 'class')
#making confution matrix 
cm = table(test_set[,3],y_pred)
#Decision tree Classifier:
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 19 - Decision Tree Classification/R/Social_Network_Ads.csv")
dataset = dataset[3:5]
str(dataset)
summary(dataset)
#Splitting the dataset
library(caTools)
split = sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set = subset(dataset, split ==TRUE)
test_set = subset(dataset,split == FALSE)
#Feature scaling:
training_set[-3] = scale(training_set[-3])
training_set[-3] = scale(training_set[-3])
#train the decision tree classification to dataset
#install.packages('rpart')
library(rpart)
classifier = rpart(formula = Purchased~., data = training_set)
#predict the test set 
y_pred = predict(classifier, newdata = test_set[-3], type = 'class')
cm = table(test_set[,3],y_pred)
cm
#visualisation of train dataset
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[,1]-1, max(set[,1]+1 ,by = 0.01)
X2 = seq(min(set[,2]-1, max(set[,2]+1 ,by = 0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set) = c('Age','EstimatedSalary')
y_grid = predict(classifier,newdata = grid_set,type = 'class')
plot(set[,-3],
main = 'Decision tree classifier(Training set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'dodgerblue', 'salmon'))
points(set,pch = 21,bg = ifelse(set[,3]==1, 'dodgerblue3', 'salmon3'))
#Visualising the test set
library(ElemstatLearn)
set = test_set
X1 = seq(min(set[,1])-1,max(seq[,1])+1,by = 0.01)
X2 = seq(min(set[,2])-1,max(seq[,2])+1,by =0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age','EstimatedSalary')
y_grid = predict(classifier,newdata = grid_set,type = 'class)
plot(set[,-3],
main = 'Decision tree classifier(Test set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'dodgerblue', 'salmon'))
points(set,pch = 21,bg = ifelse(set[,3]==1, 'dodgerblue3', 'salmon3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[,1]-1, max(set[,1]+1 ,by = 0.01)
X2 = seq(min(set[,2]-1, max(set[,2]+1 ,by = 0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set) = c('Age','EstimatedSalary')
y_grid = predict(classifier,newdata = grid_set,type = 'class')
plot(set[,-3],
main = 'Decision tree classifier(Training set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'dodgerblue', 'salmon'))
points(set,pch = 21,bg = ifelse(set[,3]==1, 'dodgerblue3', 'salmon3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[,1]-1, max(set[,1]+1 ,by = 0.01)
X2 = seq(min(set[,2]-1, max(set[,2]+1 ,by = 0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set) = c('Age','EstimatedSalary')
y_grid = predict(classifier,newdata = grid_set)
plot(set[,-3],
main = 'Decision tree classifier(Training set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'dodgerblue', 'salmon'))
points(set,pch = 21,bg = ifelse(set[,3]==1, 'dodgerblue3', 'salmon3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[,1]-1, max(set[,1]+1 ,by = 0.01)
X2 = seq(min(set[,2]-1, max(set[,2]+1 ,by = 0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set) = c('Age','EstimatedSalary')
y_grid = predict(classifier,newdata = grid_set, type = 'class')
plot(set[,-3],
main = 'Decision tree classifier(Training set)',
xlab = 'Age', ylab = 'EstimatedSalary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'dodgerblue', 'salmon'))
points(set,pch = 21,bg = ifelse(set[,3]==1, 'dodgerblue3', 'salmon3'))
#plot the decision tree
plot(classifier)
text(classifier)
q()
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 20 - Random Forest Classification/R/Social_Network_Ads.csv")
dataset
dataset = dataset[3:5]
dataset
str(dataset)
summary(dataset)
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 20 - Random Forest Classification/R/Social_Network_Ads.csv")
dataset = dataset[:,3:5]
str(dataset)
summary(dataset)
#Splite the dataset into training and test
library(caTools)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset,split == FALSE)
#Feature Scaling:
training_set[-3] = scale(training_set[-3]
test_set[-3] = scale(training_set[-3]
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(training_set[-3])
#Random Forest classifier:
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 20 - Random Forest Classification/R/Social_Network_Ads.csv")
dataset = dataset[3:5]
str(dataset)
summary(dataset)
#Splite the dataset into training and test
library(caTools)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset,split == FALSE)
#Feature Scaling:
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(training_set[-3])
#Random Forest classifier:
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 20 - Random Forest Classification/R/Social_Network_Ads.csv")
dataset = dataset[3:5]
str(dataset)
summary(dataset)
#Encoding the target features as factor
dataset$Purchased = factor(dataset$Purchased,levels = c(0,1))
#Splite the dataset into training and test
library(caTools)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset,split == FALSE)
#Feature Scaling:
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(training_set[-3])
#Random Forest classifier:
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 20 - Random Forest Classification/R/Social_Network_Ads.csv")
dataset = dataset[3:5]
str(dataset)
summary(dataset)
#Encoding the target features as factor
dataset$Purchased = factor(dataset$Purchased,levels = c(0,1))
#Splite the dataset into training and test
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset,split == FALSE)
#Feature Scaling:
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(training_set[-3])
install.packages('randomForest')
q()
#Random Forest classifier:
dataset = read.csv("C:/data Science/Machine Learning-A-Z-Codes-Datasets/Machine Learning A-Z (Codes and Datasets)/Part 3 - Classification/Section 20 - Random Forest Classification/R/Social_Network_Ads.csv")
dataset = dataset[3:5]
dataset
str(dataset)
summary(dataset)
#Encoding the target features as factor
dataset$Purchased = factor(dataset$Purchased,levels = c(0,1))
#Splite the dataset into training and test
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset,split == FALSE)
#Feature Scaling:
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(training_set[-3])
library(randomForest)
classifier = randomForest(x = training_set[-3],
  y = training_set$Purchased,
  ntree = 10) 
#predict the test result
y_pred = predict(classifier,newdata = test_set[-3])
#Find Confusion matrix 
cm = table(test_set[-3],y_pred)
#Find Confusion matrix 
cm = table(test_set[, 3],y_pred)
cm
#Visualising the training set result
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[,1])-1, max(set[,1])+1,by = 0.01)
X2 = seq(min(set[,2])-1, max(set[,2])+1,by = 0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set) = c('Age','EstimatedSalary')
prob_set = predict(classifier,type = 'response',newdata = grid_set)
y_grid = ifelse(prob_set > 0.5,1,0)
plot(set[,-3],
main = 'Random Forest Classifier(Training set)',
xlab = 'Age',ylab = 'Estimated Salary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'springgreen3','tomato'))
points(set,pch = 21,bg = ifelse(set[,3]==1,'green4','red3'))
#Visualising the Test set result
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[,1])-1, max(set[,1])+1,by = 0.01)
X2 = seq(min(set[,2])-1, max(set[,2])+1,by = 0.01)
grid_set = expand.grid(X1,X2)
colnames(grid_set) = c('Age','EstimatedSalary')
prob_set = predict(classifier,type = 'response',newdata = grid_set)
y_grid = ifelse(prob_set > 0.5,1,0)
plot(set[,-3],
main = 'Random forest classifier(Test set)',
xlab = 'Age',ylab = 'Estimated Salary',
xlim = range(X1),ylim = range(X2))
contour(X1,X2,matrix(as.numeric(y_grid),length(X1),length(X2)),add = TRUE)
points(grid_set, pch = '.',col = ifelse(y_grid == 1,'springgreen3','tomato'))
points(set,pch = 21,bg = ifelse(set[,3]==1,'green4','red3'))
q()
